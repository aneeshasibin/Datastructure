class Graph:
    def __init__(self,edges):
        self.edges=edges
        self.graph_dict={}
        for start,end in edges:
            if start in self.graph_dict:
                self.graph_dict[start].append(end)
            else:
                self.graph_dict[start]=[end]
        print("Graph Dict",self.graph_dict)
    def get_path(self,start,end,path=[]):
        path=path+[start]
        if start==end:
            return path
        if start not in self.graph_dict:
            return None
        paths=[]
        for node in self.graph_dict[start]:
            if node not in path:
                new_paths=self.get_path(node,end,path)
                for p in new_paths:
                    paths.append(p)
        return paths

    def shortest_path(self, start, end, path=[]):
        path = path + [start]
        if start == end:
            return path
        if start not in self.graph_dict:
            return None
        shortest_paths = []
        for node in self.graph_dict[start]:
            if node not in path:
                sp=self.shortest_path(node,end,path)
                if sp:
                    if shortest_paths is None or len(sp)<len(shortest_paths):
                        shortest_paths=sp
        return shortest_paths
if __name__=='__main__':
    routes=[
        ("Mumbai","Paris"),
        ("Mumbai", "Dubai"),
        ("Paris", "Dubai"),
        ("Paris", "NewYork"),
        ("Dubai", "NewYork"),
        ("NewYork", "Toronto")]
    route_graph=Graph(routes)
    start="Mumbai"
    end="NewYork"
    print(f" All path between: {start} and {end}: ",route_graph.get_path(start,end))
    print(f" shortest path between: {start} and {end}: ",route_graph.shortest_path(start,end))
